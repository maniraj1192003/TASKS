import unittest

def reachable(adj_list, start_node):
    def dfs(node, visited):
        visited.add(node)
        for neighbor in adj_list[node]:
            if neighbor not in visited:
                dfs(neighbor, visited)

    visited = set()
    dfs(start_node, visited)
    return visited

class TestReachableFunction(unittest.TestCase):

    def test_from_node_0(self):
        graph = [[1, 3], [2], [0], [4], [3], []]
        result = reachable(graph, 0)
        expected = {0, 1, 2, 3, 4}
        self.assertEqual(result, expected)

    def test_from_node_3(self):
        graph = [[1, 3], [2], [0], [4], [3], []]
        result = reachable(graph, 3)
        expected = {3, 4}
        self.assertEqual(result, expected)

    def test_from_node_5(self):
        graph = [[1, 3], [2], [0], [4], [3], []]
        result = reachable(graph, 5)
        expected = {5}
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
